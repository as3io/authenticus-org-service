type Query {
  allOrganizations(pagination: PaginationInput = {}, sort: OrganizationSortInput = {}): OrganizationConnection!
  organization(input: ModelIdInput!): Organization!
}

type Mutation {
  createOrganization(input: CreateOrganizationInput!): Organization!
}

type Organization {
  id: String!
  name: String!
  slug: String!
  description: String
  owner: User
  createdAt: Date
  updatedAt: Date
}

type OrganizationConnection {
  totalCount: Int!
  edges: [OrganizationEdge]!
  pageInfo: PageInfo!
}

type OrganizationEdge {
  node: Organization!
  cursor: Cursor!
}

input OrganizationSortInput {
  field: OrganizationSortField! = createdAt
  order: Int! = -1
}

input CreateOrganizationInput {
  payload: OrganizationPayloadInput!
}

input OrganizationPayloadInput {
  name: String!
  description: String
}

enum OrganizationSortField {
  name
  createdAt
  updatedAt
}

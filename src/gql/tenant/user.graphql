type Query {
  allTenantUsers(pagination: PaginationInput = {}, sort: TenantUserSortInput = {}): TenantUserConnection!
  tenantUser(input: ModelIdInput!): TenantUser!
}

type Mutation {
  createTenantUser(input: CreateTenantUserInput!): User!
}

type TenantUser {
  id: String!
  email: String!
  givenName: String
  familyName: String
  photoURL: String
  createdAt: Date
  updatedAt: Date
}

type TenantUserConnection {
  totalCount: Int!
  edges: [TenantUserEdge]!
  pageInfo: PageInfo!
}

type TenantUserEdge {
  node: TenantUser!
  cursor: Cursor!
}

input TenantUserSortInput {
  field: TenantUserSortField! = createdAt
  order: Int! = -1
}

input CreateTenantUserInput {
  # captcha: String
  payload: NewTenantUserPayloadInput
}

input NewTenantUserPayloadInput {
  email: String!
  password: String!
  givenName: String!
  familyName: String!
}

enum TenantUserSortField {
  name
  createdAt
  updatedAt
}

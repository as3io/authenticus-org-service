type Query {
  allApplications(pagination: PaginationInput = {}, sort: ApplicationSortInput = {}): ApplicationConnection!
  application(input: ModelIdInput!): Application!
}

type Mutation {
  createApplication(input: CreateApplicationInput!): Application!
}

type Application {
  id: String!
  name: String!
  slug: String!
  description: String
  createdAt: Date
  updatedAt: Date
}

type ApplicationConnection {
  totalCount: Int!
  edges: [ApplicationEdge]!
  pageInfo: PageInfo!
}

type ApplicationEdge {
  node: Application!
  cursor: Cursor!
}

input ApplicationSortInput {
  field: ApplicationSortField! = createdAt
  order: Int! = -1
}

input CreateApplicationInput {
  payload: ApplicationPayloadInput!
}

input ApplicationPayloadInput {
  name: String!
  description: String
}

enum ApplicationSortField {
  name
  createdAt
  updatedAt
}
